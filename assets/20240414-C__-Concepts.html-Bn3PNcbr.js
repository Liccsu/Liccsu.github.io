import{_ as n,o as s,c as a,e}from"./app-C4bsKav7.js";const p={},t=e(`<h1 id="c-concepts" tabindex="-1"><a class="header-anchor" href="#c-concepts" aria-hidden="true">#</a> C++ Concepts</h1><p>概念（Concepts）是C++20中引入的一项特性，它们是对模板参数的约束，用于指定模板参数必须满足的接口（例如，一组必需的函数、类型、操作符等）和语义要求。概念旨在提高模板编程的表达力和安全性，通过更清晰的语义来改善编译器错误信息，并促使编写更干净、更易于理解的代码。</p><p>在C++20之前，模板编程通常是通过特化和重载来实现各种约束的，这往往会产生冗长的错误信息，让人难以理解实际的问题所在。概念允许你以更声明式的方式指定约束，使得模板的意图更明确，能够在编译时提早发现错误，同时生成更有用的错误信息。</p><p><strong>以下是一些使用概念的优势：</strong></p><ol><li><strong>提升代码清晰度：</strong> 概念使得模板的要求变得明确，可以直接在函数模板的声明中看到对类型参数的要求。</li><li><strong>改进错误信息：</strong> 当传递给模板的类型不符合概念要求时，编译器可以提供更加直接的错误信息，这有助于快速定位问题。</li><li><strong>简化模板定义：</strong> 概念能够替代复杂的SFINAE（Substitution Failure Is Not An Error）表达式，简化模板的定义。</li><li><strong>提供更好的工具支持：</strong> 由于概念的语义更加明确，IDE和其他代码分析工具能够提供更好的支持。</li></ol><p><strong>示例：</strong></p><p>在C++20之前，你可能需要这样写模板：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">typename</span> <span class="token class-name">std</span><span class="token double-colon punctuation">::</span>enable_if<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>is_integral<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>value<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type
<span class="token function">is_odd</span><span class="token punctuation">(</span>T i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">bool</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用C++20的概念，可以更清晰地表达这一意图：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">requires</span> std<span class="token double-colon punctuation">::</span>integral<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>T i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">bool</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 或者使用概念作为函数模板参数的一部分</span>
<span class="token keyword">template</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>integral T<span class="token operator">&gt;</span>
<span class="token keyword">bool</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>T i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">bool</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>std::integral</code>是一个标准库提供的概念，它要求类型T必须是一个整数类型。如果尝试将非整数类型的值传递给<code>is_odd</code>函数，编译器将提供明确的错误信息，指出传递的参数没有满足<code>std::integral</code>概念的要求。</p><p><strong>创建自定义概念：</strong></p><p>你可以定义自己的概念来表示特定的约束集合。例如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;concepts&gt;</span></span>

<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">concept</span> <span class="token class-name">Addable</span> <span class="token operator">=</span> <span class="token keyword">requires</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span> <span class="token operator">-&gt;</span> std<span class="token double-colon punctuation">::</span>convertible_to<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span><span class="token operator">&lt;</span>Addable T<span class="token operator">&gt;</span>
T <span class="token function">add</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>Addable</code>概念要求任何使用该概念的类型必须支持加法操作，并且结果可以转换为该类型。</p><p>总的来说，概念使得模板代码的编写和使用变得更加直观和安全，丰富了C++的类型系统，提高了模板编程的整体体验。</p>`,16),o=[t];function c(l,i){return s(),a("div",null,o)}const u=n(p,[["render",c],["__file","20240414-C__-Concepts.html.vue"]]);export{u as default};
