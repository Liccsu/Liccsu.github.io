import{_ as n,o as s,c as a,e as t}from"./app-C4bsKav7.js";const e="/assets/image-20230823033635993-D5I8hH4B.png",p="/assets/image-20230823033705071-Ql7_sAmX.png",c="/assets/image-20230823033747157-qiTEGEun.png",o={},i=t('<h3 id="一、linux中进程的用户管理" tabindex="-1"><a class="header-anchor" href="#一、linux中进程的用户管理" aria-hidden="true">#</a> 一、Linux中进程的用户管理</h3><p>在Linux中，每个进程都拥有真实用户ID (==uid==)和真实组ID (==gid==)，有效用户ID (==euid==)和有效组ID (==egid==)，保存的设置用户ID (==suid==)和保存的设置组ID (==sgid==)，另外地，还有文件系统用户ID (==fsuid==)和文件系统组ID (==fsgid==)。</p><blockquote><p>(1) 真实用户、组 (uid/gid)：指的是进程的实际所有者和所属组，一般就是执行此进程的用户。</p><p>(2) 有效用户、组 (euid/egid)：用来判断进程执行各种操作的权限。</p><p>(3) 保存的设置用户、组 (suid/sgid)：是有效用户、组的副本，主要用来还原有效用户、组的值。</p><p>(4) 文件系统用户、组 (fsuid/fsgid)：仅用来进行文件权限检查。</p></blockquote><h3 id="二、如何获取进程号" tabindex="-1"><a class="header-anchor" href="#二、如何获取进程号" aria-hidden="true">#</a> 二、如何获取进程号？</h3><p>(1) 通过<code>pidof</code>命令获取:</p><p><img src="'+e+'" alt="image-20230823033635993"></p><p>(2) 通过<code>pgrep</code>命令获取:</p><p><img src="'+p+`" alt="image-20230823033705071"></p><p>(3) 可以通过遍历<code>/proc</code>来获取：</p><blockquote><p>在<code>/proc</code>下存在若干以数字命名的目录，这些数字就是PID，目录下有关于该进程的一些信息，其中<code>/proc/$pid/cmdline</code>文件里的内容便是进程名。</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token class-name">pid_t</span> <span class="token class-name">get_pid_t</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DIR <span class="token operator">*</span>dir<span class="token punctuation">;</span>
    FILE <span class="token operator">*</span>file<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">dirent</span> <span class="token operator">*</span>ent<span class="token punctuation">;</span>
    <span class="token keyword">char</span> filename<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cmdline<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">pid_t</span> pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    dir <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token string">&quot;/proc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>dir <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ent <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ent<span class="token operator">-&gt;</span>d_type <span class="token operator">==</span> DT_DIR <span class="token operator">&amp;&amp;</span> <span class="token function">STR_IS_INT</span><span class="token punctuation">(</span>ent<span class="token operator">-&gt;</span>d_name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">snprintf</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/proc/%s/cmdline&quot;</span><span class="token punctuation">,</span> ent<span class="token operator">-&gt;</span>d_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">fgets</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cmdline<span class="token punctuation">)</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">fclose</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> cmdline<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        pid <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>ent<span class="token operator">-&gt;</span>d_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">closedir</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> pid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+`" alt="image-20230823033747157"></p><h3 id="三、通过进程号获取struct-pid" tabindex="-1"><a class="header-anchor" href="#三、通过进程号获取struct-pid" aria-hidden="true">#</a> 三、通过进程号获取<code>struct pid</code></h3><p>先看一下<code>struct pid</code>的定义：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">pid</span>
<span class="token punctuation">{</span>
	<span class="token class-name">atomic_t</span> count<span class="token punctuation">;</span> <span class="token comment">// pid的引用计数</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span> <span class="token comment">// pid的层级</span>
	<span class="token comment">/* lists of tasks that use this pid */</span>
	<span class="token keyword">struct</span> <span class="token class-name">hlist_head</span> tasks<span class="token punctuation">[</span>PIDTYPE_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">/* wait queue for pidfd notifications */</span>
	<span class="token class-name">wait_queue_head_t</span> wait_pidfd<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">rcu_head</span> rcu<span class="token punctuation">;</span> <span class="token comment">// RCU头, 用于RCU同步机制</span>
	<span class="token keyword">struct</span> <span class="token class-name">upid</span> numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用于储存pid号的结构体数组</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>struct upid</code>定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">upid</span>
<span class="token punctuation">{</span>
    <span class="token comment">/* Try to keep pid_chain in the same cacheline as nr for find_vpid */</span>
    <span class="token keyword">int</span> nr<span class="token punctuation">;</span>                        <span class="token comment">/* the pid value */</span>
    <span class="token keyword">struct</span> <span class="token class-name">pid_namespace</span> <span class="token operator">*</span>ns<span class="token punctuation">;</span>      <span class="token comment">/* namespace */</span>
    <span class="token keyword">struct</span> <span class="token class-name">hlist_node</span> pid_chain<span class="token punctuation">;</span>   <span class="token comment">/* hash chain */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>$(Linux-4.19)/kernel/pid.c</code>中可以发现这样一个函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">pid</span> <span class="token operator">*</span><span class="token function">find_get_pid</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> nr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">pid</span> <span class="token operator">*</span>pid<span class="token punctuation">;</span>

	<span class="token function">rcu_read_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	pid <span class="token operator">=</span> <span class="token function">get_pid</span><span class="token punctuation">(</span><span class="token function">find_vpid</span><span class="token punctuation">(</span>nr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">rcu_read_unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> pid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中参数<code>nr</code>便是上面获取到的进程号</p><p>其中<code>find_vpid</code>和<code>get_pid</code>定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">pid</span> <span class="token operator">*</span><span class="token function">find_vpid</span><span class="token punctuation">(</span><span class="token keyword">int</span> nr<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">find_pid_ns</span><span class="token punctuation">(</span>nr<span class="token punctuation">,</span> <span class="token function">task_active_pid_ns</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">struct</span> <span class="token class-name">pid</span> <span class="token operator">*</span><span class="token function">get_pid</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pid</span> <span class="token operator">*</span>pid<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pid<span class="token punctuation">)</span>
		<span class="token function">atomic_inc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pid<span class="token operator">-&gt;</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> pid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>atomic_inc(&amp;pid-&gt;count)</code>表示对<code>pid-&gt;count</code>进行原子级加一操作，所谓“原子”，就是最小的不可分解的最小执行单位，使用锁定总线的单指令进行不可分解的原子操作，以避免操作被中断或其他事件打断。</p><h3 id="四、通过struct-pid获取struct-task-struct" tabindex="-1"><a class="header-anchor" href="#四、通过struct-pid获取struct-task-struct" aria-hidden="true">#</a> 四、通过<code>struct pid</code>获取<code>struct task_struct</code>：</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span><span class="token function">get_pid_task</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pid</span> <span class="token operator">*</span>pid<span class="token punctuation">,</span> <span class="token keyword">enum</span> <span class="token class-name">pid_type</span> type<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>result<span class="token punctuation">;</span>
	<span class="token function">rcu_read_lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	result <span class="token operator">=</span> <span class="token function">pid_task</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span>
		<span class="token function">get_task_struct</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">rcu_read_unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>struct task_struct</code>定义在<code>$(Linux-4.19)/include/Linux/sched.h</code>，太长了就只贴出本篇要用到的两个成员变量：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">task_struct</span>
<span class="token punctuation">{</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token comment">/* Objective and real subjective task credentials (COW): */</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu		<span class="token operator">*</span>real_cred<span class="token punctuation">;</span>

	<span class="token comment">/* Effective (overridable) subjective task credentials (COW): */</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu		<span class="token operator">*</span>cred<span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看注释可以知道，其中<code>real_cred</code>指向客体和真实主体证书，<code>cred</code>指向有效主体证书，其结构体定义如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">cred</span> <span class="token punctuation">{</span>
	<span class="token class-name">atomic_t</span>	usage<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DEBUG_CREDENTIALS</span></span>
	<span class="token class-name">atomic_t</span>	subscribers<span class="token punctuation">;</span>	<span class="token comment">/* number of processes subscribed */</span>
	<span class="token keyword">void</span>		<span class="token operator">*</span>put_addr<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span>	magic<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC</span>	<span class="token expression"><span class="token number">0x43736564</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CRED_MAGIC_DEAD</span>	<span class="token expression"><span class="token number">0x44656144</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
	<span class="token class-name">kuid_t</span>		uid<span class="token punctuation">;</span>		<span class="token comment">/* real UID of the task */</span>
	<span class="token class-name">kgid_t</span>		gid<span class="token punctuation">;</span>		<span class="token comment">/* real GID of the task */</span>
	<span class="token class-name">kuid_t</span>		suid<span class="token punctuation">;</span>		<span class="token comment">/* saved UID of the task */</span>
	<span class="token class-name">kgid_t</span>		sgid<span class="token punctuation">;</span>		<span class="token comment">/* saved GID of the task */</span>
	<span class="token class-name">kuid_t</span>		euid<span class="token punctuation">;</span>		<span class="token comment">/* effective UID of the task */</span>
	<span class="token class-name">kgid_t</span>		egid<span class="token punctuation">;</span>		<span class="token comment">/* effective GID of the task */</span>
	<span class="token class-name">kuid_t</span>		fsuid<span class="token punctuation">;</span>		<span class="token comment">/* UID for VFS ops */</span>
	<span class="token class-name">kgid_t</span>		fsgid<span class="token punctuation">;</span>		<span class="token comment">/* GID for VFS ops */</span>
	<span class="token keyword">unsigned</span>	securebits<span class="token punctuation">;</span>	<span class="token comment">/* SUID-less security management */</span>
	<span class="token class-name">kernel_cap_t</span>	cap_inheritable<span class="token punctuation">;</span> <span class="token comment">/* caps our children can inherit */</span>
	<span class="token class-name">kernel_cap_t</span>	cap_permitted<span class="token punctuation">;</span>	<span class="token comment">/* caps we&#39;re permitted */</span>
	<span class="token class-name">kernel_cap_t</span>	cap_effective<span class="token punctuation">;</span>	<span class="token comment">/* caps we can actually use */</span>
	<span class="token class-name">kernel_cap_t</span>	cap_bset<span class="token punctuation">;</span>	<span class="token comment">/* capability bounding set */</span>
	<span class="token class-name">kernel_cap_t</span>	cap_ambient<span class="token punctuation">;</span>	<span class="token comment">/* Ambient capability set */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_KEYS</span></span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span>	jit_keyring<span class="token punctuation">;</span>	<span class="token comment">/* default keyring to attach requested
					 * keys to */</span>
	<span class="token keyword">struct</span> <span class="token class-name">key</span> __rcu <span class="token operator">*</span>session_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring inherited over fork */</span>
	<span class="token keyword">struct</span> <span class="token class-name">key</span>	<span class="token operator">*</span>process_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring private to this process */</span>
	<span class="token keyword">struct</span> <span class="token class-name">key</span>	<span class="token operator">*</span>thread_keyring<span class="token punctuation">;</span> <span class="token comment">/* keyring private to this thread */</span>
	<span class="token keyword">struct</span> <span class="token class-name">key</span>	<span class="token operator">*</span>request_key_auth<span class="token punctuation">;</span> <span class="token comment">/* assumed request_key authority */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SECURITY</span></span>
	<span class="token keyword">void</span>		<span class="token operator">*</span>security<span class="token punctuation">;</span>	<span class="token comment">/* subjective LSM security */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
	<span class="token keyword">struct</span> <span class="token class-name">user_struct</span> <span class="token operator">*</span>user<span class="token punctuation">;</span>	<span class="token comment">/* real user ID subscription */</span>
	<span class="token keyword">struct</span> <span class="token class-name">user_namespace</span> <span class="token operator">*</span>user_ns<span class="token punctuation">;</span> <span class="token comment">/* user_ns the caps and keyrings are relative to. */</span>
	<span class="token keyword">struct</span> <span class="token class-name">group_info</span> <span class="token operator">*</span>group_info<span class="token punctuation">;</span>	<span class="token comment">/* supplementary groups for euid/fsgid */</span>
	<span class="token comment">/* RCU deletion */</span>
	<span class="token keyword">union</span> <span class="token punctuation">{</span>
		<span class="token keyword">int</span> non_rcu<span class="token punctuation">;</span>			<span class="token comment">/* Can we skip RCU deletion? */</span>
		<span class="token keyword">struct</span> <span class="token class-name">rcu_head</span>	rcu<span class="token punctuation">;</span>		<span class="token comment">/* RCU deletion hook */</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、更改权限" tabindex="-1"><a class="header-anchor" href="#五、更改权限" aria-hidden="true">#</a> 五、更改权限</h3><p>将得到的<code>struct cred</code>中的以下几个成员变量赋值<code>0</code>：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>	<span class="token class-name">kuid_t</span>		uid<span class="token punctuation">;</span>		<span class="token comment">/* real UID of the task */</span>
	<span class="token class-name">kgid_t</span>		gid<span class="token punctuation">;</span>		<span class="token comment">/* real GID of the task */</span>
	<span class="token class-name">kuid_t</span>		suid<span class="token punctuation">;</span>		<span class="token comment">/* saved UID of the task */</span>
	<span class="token class-name">kgid_t</span>		sgid<span class="token punctuation">;</span>		<span class="token comment">/* saved GID of the task */</span>
	<span class="token class-name">kuid_t</span>		euid<span class="token punctuation">;</span>		<span class="token comment">/* effective UID of the task */</span>
	<span class="token class-name">kgid_t</span>		egid<span class="token punctuation">;</span>		<span class="token comment">/* effective GID of the task */</span>
	<span class="token class-name">kuid_t</span>		fsuid<span class="token punctuation">;</span>		<span class="token comment">/* UID for VFS ops */</span>
	<span class="token class-name">kgid_t</span>		fsgid<span class="token punctuation">;</span>		<span class="token comment">/* GID for VFS ops */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，就已经将一个进程提权至<code>root</code>了。</p>`,33),l=[i];function u(d,r){return s(),a("div",null,l)}const m=n(o,[["render",u],["__file","Linuxnahetaifuyujinchengrootquanxian.html.vue"]]);export{m as default};
