import{_ as n,o as s,c as a,e as p}from"./app-C4bsKav7.js";const t={},e=p(`<h1 id="_15-三数之和" tabindex="-1"><a class="header-anchor" href="#_15-三数之和" aria-hidden="true">#</a> 15.三数之和</h1><h2 id="题目描述" tabindex="-1"><a class="header-anchor" href="#题目描述" aria-hidden="true">#</a> 题目描述</h2><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p>**注意：**答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [-1,0,1,2,-1,-4]
输出：[[-1,-1,2],[-1,0,1]]
解释：
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。
不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。
注意，输出的顺序和三元组的顺序并不重要。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [0,1,1]
输出：[]
解释：唯一可能的三元组和不为 0 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [0,0,0]
输出：[[0,0,0]]
解释：唯一可能的三元组和为 0 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 3000</code></li><li><code>-105 &lt;= nums[i] &lt;= 105</code></li></ul><h2 id="解题" tabindex="-1"><a class="header-anchor" href="#解题" aria-hidden="true">#</a> 解题</h2><p>总体思路是参考<strong>1.两数之和</strong>，三数之和的话，只需选定一个数假定为<code>A</code>，那么就转化为两数之和问题了，要求解的另外两个数假定为<code>B</code>和<code>C</code>，满足<code>B+C=-A</code>，即两数之和问题。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> ret<span class="token punctuation">;</span> <span class="token comment">// 保存结果三元组</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> ret<span class="token punctuation">;</span> <span class="token comment">// 过滤一下不可能凑出三数之和条件的情况</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// nums[i]即为选定的第一个数，那么剩下满足条件的两个数就是两数之和问题</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 如果和上一轮循环判断的数相同则没必要再判断一次了，跳过直到遇到不同的数</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">int</span> li <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ri <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 定义双指针，左指针从左往右，右指针从右往左</span>
            <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// nums[i]是选定的数，那么剩下两数之和则为-nums[i]</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>li <span class="token operator">&lt;</span> ri<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 左指针必须在右指针左边</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>li<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>ri<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token operator">&amp;&amp;</span> li <span class="token operator">&lt;</span> ri<span class="token punctuation">)</span> <span class="token operator">++</span>li<span class="token punctuation">;</span> <span class="token comment">// 如果此时左右指针指向的两数之和比目标和小，说明应该增大其中某个数，即左指针右移</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">&gt;=</span> ri<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 当左右指针相遇了，说明不存在满足两数之和为target的两个数</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>li<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>ri<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target <span class="token operator">&amp;&amp;</span> li <span class="token operator">&lt;</span> ri<span class="token punctuation">)</span> <span class="token operator">--</span>ri<span class="token punctuation">;</span> <span class="token comment">// 如果此时左右指针指向的两数之和比目标和大，说明应该减小其中某个数，即右指针左移</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">&gt;=</span> ri<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 当左右指针相遇了，说明不存在满足两数之和为target的两个数</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>li<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>ri<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 当找到两个数满足两数之和条件时</span>
                    ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>li<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>ri<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 与第一选定数合并即为满足三数之和的三元组，加入结果集合中</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>li<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>li<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> li <span class="token operator">&lt;</span> ri<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果和上一轮循环判断的数相同则没必要再判断一次了，跳过直到遇到不同的数</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">&gt;=</span> ri<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 当左右指针相遇了，说明所有可能的二元组都遍历完了</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>ri<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>ri<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> li <span class="token operator">&lt;</span> ri<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果和上一轮循环判断的数相同则没必要再判断一次了，跳过直到遇到不同的数</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">&gt;=</span> ri<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 当左右指针相遇了，说明所有可能的二元组都遍历完了</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","20240327-LeetCode-15.sanshuzhihe.html.vue"]]);export{r as default};
